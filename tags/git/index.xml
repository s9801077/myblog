<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on Puck&#39;s Blog</title><link>https://blog.puckwang.com/tags/git/</link><description>Recent content in Git on Puck&#39;s Blog</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2017-2020, Puck Wang; all rights reserved.</copyright><lastBuildDate>Mon, 19 Apr 2021 03:34:36 +0800</lastBuildDate><atom:link href="https://blog.puckwang.com/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 Git Bisect 快速找到第一個有問題的 Commit</title><link>https://blog.puckwang.com/post/2021/use-git-bisect-debug/</link><pubDate>Mon, 19 Apr 2021 03:34:36 +0800</pubDate><guid>https://blog.puckwang.com/post/2021/use-git-bisect-debug/</guid><description>&lt;div class=&#34;image&#34;&gt;
&lt;figure class=&#34;figure&#34;&gt;
&lt;img src=&#39;https://blog.puckwang.com/images/2021/git-log.png&#39; class=&#34;figure-img img-fluid rounded&#34;
alt=&#34;Git log&#34;
width=&#34;600&#34;
&gt;
&lt;figcaption class=&#34;figure-caption text-center&#34;&gt;Git log&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;現在專案很常使用 Git 作為版本控制系統，所以在遇到 Bug 找不到是哪裡出錯時，可以藉由找出第一次出錯的 Commit 來找到問題原因。&lt;/p&gt;
&lt;p&gt;但在大型專案中，全部 Commit 可能達上千筆，如果遇到很久沒發現的 Bug，就可能會發比較久的時間去找是哪個 Commit 出問題。&lt;/p&gt;
&lt;p&gt;常見的可能會看 Commit 訊息來反推可能有問題的 Commit，或是用最笨的方法一個個往回找，這樣效率都不太好。&lt;/p&gt;
&lt;p&gt;利用 Git 內建的 &lt;strong&gt;Git Bisect&lt;/strong&gt; 來使用二元搜尋的方式來找有問題的 Commit，就可以大大提升效率。&lt;/p&gt;</description></item><item><title>Git 進階應用 Submodule 與 Subtree，使用它們來拆分專案</title><link>https://blog.puckwang.com/post/2020/git-submodule-vs-subtree/</link><pubDate>Wed, 18 Mar 2020 21:29:12 +0800</pubDate><guid>https://blog.puckwang.com/post/2020/git-submodule-vs-subtree/</guid><description>&lt;p&gt;在開發過程中，專案隨著時間變得越來越肥，不時還生出子專案，此時就會遇到需要各專案共用一些 Code 的部分，如果共用的部分是用 &lt;code&gt;複製貼上&lt;/code&gt; 的方式去同步，那勢必一定會造成兩邊不同步，維護困難。&lt;/p&gt;
&lt;p&gt;本篇文將分享 Git Submodule 與 Git Subtree 的差異及它們的使用方法。&lt;/p&gt;</description></item><item><title>利用 GPG 簽署 git commit</title><link>https://blog.puckwang.com/post/2019/sign_git_commit_with_gpg/</link><pubDate>Wed, 03 Apr 2019 16:04:42 +0800</pubDate><guid>https://blog.puckwang.com/post/2019/sign_git_commit_with_gpg/</guid><description>&lt;p&gt;GPG 全名為 GNU Privacy Guard 也可以簡稱為 GnuPG，他是一個加密軟體，但也可以用來驗證身份。&lt;/p&gt;
&lt;p&gt;今天就要來將我們 git commit 加上 GPG 簽署，讓它 Push 到 Github 等代管平台後，別人可以確定這份 Commit 是你提交的。&lt;/p&gt;</description></item><item><title>Git 常用指令與設定筆記</title><link>https://blog.puckwang.com/post/2018/my_git_command_cheat_sheet/</link><pubDate>Mon, 24 Dec 2018 12:59:13 +0800</pubDate><guid>https://blog.puckwang.com/post/2018/my_git_command_cheat_sheet/</guid><description>&lt;p&gt;使用 Git 也有一段時間了，除了常用的 commit, push 等常用基本指令外，還有許多很實用的指令，在這邊做一下紀錄。&lt;/p&gt;</description></item></channel></rss>